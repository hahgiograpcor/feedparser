<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="http://lambda-the-ultimate.org">
<channel>
 <title>Lambda the Ultimate - Programming Languages Weblog</title>
 <link>http://lambda-the-ultimate.org</link>
 <description>Programming languages news, articles and discussion</description>
 <language>en</language>
<item>
 <title> John C Reynolds Doctoral Dissertation Award nominations for 2014</title>
 <link>http://lambda-the-ultimate.org/node/5088</link>
 <description>&lt;blockquote &gt;&lt;p &gt;Presented annually to the author of the outstanding doctoral dissertation in the area of Programming Languages. The award includes a prize of $1,000. The winner can choose to receive the award at ICFP, OOPSLA, POPL, or PLDI.&lt;/blockquote&gt;
&lt;p &gt;
I guess it is fairly obvious why professors should &lt;a href=&quot;http://www.sigplan.org/Awards/Dissertation/&quot;&gt;propose their students&lt;/a&gt; (the deadline is  January 4th 2015). Newly minted PhD should, for similar reasons, make sure their professors are reminded of these reasons. I can tell you that the competition is going to be tough this year; but hey, you didn&#039;t go into programming language theory thinking it is going to be easy, did you? &lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/6">General</category>
 <pubDate>Wed, 26 Nov 2014 22:05:25 +0000</pubDate>
</item>
<item>
 <title>Zélus : A Synchronous Language with ODEs</title>
 <link>http://lambda-the-ultimate.org/node/5087</link>
 <description>&lt;p &gt;
&lt;a href=&quot;http://www.di.ens.fr/~pouzet/bib/hscc13.pdf&quot;&gt;
Zélus : A Synchronous Language with ODEs&lt;/a&gt;&lt;br &gt;
Timothy Bourke, Marc Pouzet&lt;br &gt;
2013&lt;/p&gt;

&lt;blockquote &gt;
&lt;p &gt;
&lt;a href=&quot;http://zelus.di.ens.fr/&quot;&gt;Zélus&lt;/a&gt; is a new programming
language for modeling systems that mix discrete logical time and
continuous time behaviors. From a user&#039;s perspective, its main
originality is to extend an existing &lt;a href=&quot;http://en.wikipedia.org/wiki/Lustre_%28programming_language%29&quot;&gt;Lustre&lt;/a&gt;-like
synchronous language with Ordinary Differential Equations (ODEs). The
extension is conservative: any synchronous program expressed as
data-flow equations and hierarchical automata can be composed
arbitrarily with ODEs in the same source code.&lt;/p&gt;

&lt;p &gt;A dedicated type system and causality analysis ensure that all
discrete changes are aligned with zero-crossing events so that no side
effects or discontinuities occur during integration. Programs are
statically scheduled and translated into sequential code that, by
construction, runs in bounded time and space. Compilation is effected
by source-to-source translation into a small synchronous subset which
is processed by a standard synchronous compiler architecture. The
resultant code is paired with an off-the-shelf numeric solver.&lt;/p&gt;

&lt;p &gt;We show that it is possible to build a modeler for explicit hybrid
systems à la &lt;a href=&quot;http://en.wikipedia.org/wiki/Simulink&quot;&gt;Simulink&lt;/a&gt;/&lt;a href=&quot;http://en.wikipedia.org/wiki/Stateflow&quot;&gt;Stateflow&lt;/a&gt; on top of
an existing synchronous language, using it both as a semantic basis
and as a target for code generation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p &gt;Synchronous programming languages (à la &lt;a href=&quot;http://www.di.ens.fr/~pouzet/lucid-synchrone/&quot;&gt;Lucid
Synchrone&lt;/a&gt;) are language designs for reactive systems with discrete
time. Zélus extends them gracefully to hybrid discrete/continuous
systems, to interact with the physical world, or simulate it -- while
preserving their strong semantic qualities.&lt;/p&gt;

&lt;p &gt;The paper is short (6 pages) and centered around examples rather than
the theory -- I enjoyed it. Not being familiar with the domain, I was
unsure what the &quot;zero-crossings&quot; mentioned in the introductions are,
but there is a good explanation further down in the paper:&lt;/p&gt;

&lt;blockquote &gt;&lt;p &gt;The standard way to detect events in a numeric solver is
via zero-crossings where a solver monitors expressions for changes in
sign and then, if they are detected, searches for a more precise
instant of crossing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p &gt;The &lt;a href=&quot;http://zelus.di.ens.fr/&quot;&gt;Zélus website&lt;/a&gt; has a &lt;a href=&quot;http://zelus.di.ens.fr/papers.html&quot;&gt;&#039;publications&#039; page&lt;/a&gt; with
more advanced material, and an &lt;a href=&quot;http://zelus.di.ens.fr/examples.html&quot;&gt;&#039;examples&#039; page&lt;/a&gt; with
case studies.&lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/6">General</category>
 <pubDate>Sat, 22 Nov 2014 18:31:27 +0000</pubDate>
</item>
<item>
 <title>Facebook releases &quot;Flow&quot;, a statically typed JavaScript variant</title>
 <link>http://lambda-the-ultimate.org/node/5086</link>
 <description>&lt;blockquote &gt;&lt;p &gt;
The goal of Flow is to find errors in JavaScript code with little programmer effort. Flow relies heavily on type inference to find type errors even when the program has not been annotated - it precisely tracks the types of variables as they flow through the program.&lt;/p&gt;
&lt;p &gt;At the same time, Flow is a gradual type system. Any parts of your program that are dynamic in nature can easily bypass the type checker, so you can mix statically typed code with dynamic code.&lt;/p&gt;
&lt;p &gt;Flow also supports a highly expressive type language. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving null, unlike most type systems.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p &gt;&lt;a href=&quot;http://flowtype.org/docs/about-flow.html#_&quot;&gt;Read more here.&lt;/a&gt;&lt;br &gt;
&lt;a href=&quot;https://code.prod.facebook.com/posts/1505962329687926/flow-a-new-static-type-checker-for-javascript/&quot;&gt;Here&#039;s the announcement from Facebook.&lt;/a&gt;&lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/6">General</category>
 <pubDate>Tue, 18 Nov 2014 19:19:15 +0000</pubDate>
</item>
<item>
 <title>Why do we need modules at all?</title>
 <link>http://lambda-the-ultimate.org/node/5079</link>
 <description>&lt;p &gt;&lt;a href=&quot;http://erlang.org/pipermail/erlang-questions/2011-May/058768.html&quot;&gt;Post&lt;/a&gt; by Joe Armstrong of Erlang fame. Leader:&lt;/p&gt;
&lt;blockquote &gt;&lt;p &gt;
Why do we need modules at all? This is a brain-dump-stream-of-consciousness-thing. I&#039;ve been thinking about this for a while. I&#039;m proposing a slightly different way of programming here. The basic idea is:&lt;/p&gt;
&lt;ul &gt;
&lt;li &gt; do away with modules
&lt;li &gt; all functions have unique distinct names
&lt;li &gt; all functions have (lots of) meta data
&lt;li &gt; all functions go into a global (searchable) Key-value database
&lt;li &gt; we need letrec
&lt;li &gt; contribution to open source can be as simple as contributing a single function
&lt;li &gt; there are no &quot;open source projects&quot; - only &quot;the open source Key-Value database of all functions&quot;
&lt;li &gt; Content is peer reviewed
&lt;/ul&gt;
&lt;p &gt;Why does Erlang have modules? There&#039;s a good an bad side to modules. Good: Provides a unit of compilation, a unit of code distribution. unit of code replacement. Bad: It&#039;s very difficult to decide which module to put an individual function in. Break encapsulation (see later).
&lt;/p&gt;&lt;/blockquote&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/1">LtU Forum</category>
 <pubDate>Wed, 05 Nov 2014 23:56:11 +0000</pubDate>
</item>
<item>
 <title>Conservation laws for free!</title>
 <link>http://lambda-the-ultimate.org/node/5078</link>
 <description>&lt;p &gt;In this year&#039;s &lt;A href=&quot;http://popl.mpi-sws.org/2014/&quot;&gt;POPL&lt;/A&gt;, &lt;A href=&quot;bentnib.org&quot;&gt;Bob Atkey&lt;/A&gt; made a splash by showing how to get &lt;A href=&quot;http://bentnib.org/conservation-laws.pdf&quot;&gt;from parametricity to conservation laws, via Noether&#039;s theorem&lt;/A&gt;:&lt;/p&gt;
&lt;blockquote &gt;&lt;p &gt;
   Invariance is of paramount importance in programming languages and in physics. In programming languages, John Reynolds’ theory of relational parametricity demonstrates that parametric polymorphic programs are invariant under change of data representation, a property that yields “free” theorems about programs just from their types. In physics, Emmy Noether showed that if the action of a physical system is invariant under change of coordinates, then the physical system has a conserved quantity: a quantity that remains constant for all time. Knowledge of conserved quantities can reveal deep properties of physical systems. For example, the conservation of energy, which by Noether’s theorem is a consequence of a system’s invariance under time-shifting.&lt;/p&gt;
&lt;p &gt;   In this paper, we link Reynolds’ relational parametricity with Noether’s theorem for deriving conserved quantities. We propose an extension of System Fω with new kinds, types and term constants for writing programs that describe classical mechanical systems in terms of their Lagrangians. We show, by constructing a relationally parametric model of our extension of Fω, that relational parametricity is enough to satisfy the hypotheses of Noether’s theorem, and so to derive conserved quantities for free, directly from the polymorphic types of Lagrangians expressed in our system.
   &lt;/p&gt;&lt;/blockquote&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/22">Category Theory</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/5">Fun</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/11">Functional</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/20">Lambda Calculus</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/34">Scientific Programming</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/29">Semantics</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/19">Theory</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/21">Type Theory</category>
 <pubDate>Tue, 28 Oct 2014 07:52:46 +0000</pubDate>
</item>
<item>
 <title>Seemingly impossible programs</title>
 <link>http://lambda-the-ultimate.org/node/5074</link>
 <description>&lt;p &gt;In case this one went under the radar, at &lt;A href=&quot;http://www.cse.psu.edu/popl/12/&quot;&gt;POPL&#039;12&lt;/A&gt;, &lt;A href=&quot;http://www.cs.bham.ac.uk/~mhe/&quot;&gt;Martín Escardó&lt;/A&gt; gave a tutorial on &lt;A href=&quot;http://www.cs.bham.ac.uk/~mhe/.talks/popl2012/escardo-popl2012.pdf&quot;&gt;seemingly impossible functional programs&lt;/A&gt;:&lt;/p&gt;
&lt;blockquote &gt;&lt;p &gt;
Programming language semantics is typically applied to&lt;br &gt;
prove compiler correctness and allow (manual or automatic) program&lt;br &gt;
verification. Certain kinds of semantics can also be applied to&lt;br &gt;
discover programs that one wouldn&#039;t have otherwise thought of. This is&lt;br &gt;
the case, in particular, for semantics that incorporate topological&lt;br &gt;
ingredients (limits, continuity, openness, compactness). For example,&lt;br &gt;
it turns out that some function types (X -&amp;gt; Y) with X infinite (but&lt;br &gt;
compact) do have decidable equality, contradicting perhaps popular&lt;br &gt;
belief, but certainly not (higher-type) computability theory. More&lt;br &gt;
generally, one can often check infinitely many cases in finite time.&lt;/p&gt;
&lt;p &gt;I will show you such programs, run them fast in surprising instances,&lt;br &gt;
and introduce the theory behind their derivation and working. In&lt;br &gt;
particular, I will study a single (very high type) program that (i)&lt;br &gt;
optimally plays sequential games of unbounded length, (ii) implements&lt;br &gt;
the Tychonoff Theorem from topology (and builds finite-time search&lt;br &gt;
functions for infinite sets), (iii) realizes the double-negation shift&lt;br &gt;
from proof theory (and allows us to extract programs from classical&lt;br &gt;
proofs that use the axiom of countable choice). There will be several&lt;br &gt;
examples in the languages Haskell and Agda.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p &gt;A &lt;A href=&quot;http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/&quot;&gt;shorter version&lt;/A&gt; (coded in Haskell) appears in Andrej Bauer&#039;s blog.&lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/22">Category Theory</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/5">Fun</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/11">Functional</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/10">Paradigms</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/29">Semantics</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/19">Theory</category>
 <pubDate>Wed, 22 Oct 2014 09:57:47 +0000</pubDate>
</item>
<item>
 <title>EATCS Award 2014: Gordon Plotkin</title>
 <link>http://lambda-the-ultimate.org/node/5068</link>
 <description>&lt;blockquote &gt;&lt;p &gt;
Gordon Plotkin is renowned for his groundbreaking contributions to programming language semantics, which have helped to shape the landscape of theoretical computer science, and which have im-pacted upon the design of programming languages and their verification technologies. The in-fluence of his pioneering work on logical frameworks pervades modern proof technologies. In addition, he has made outstanding contributions in machine learning, automated theorem prov-ing, and computer-assisted reasoning. He is still active in research at the topmost level, with his current activities placing him at the forefront of fields as diverse as programming semantics, applied logic, and systems biology.&lt;/blockquote&gt;
&lt;p &gt;
Well &lt;a href=&quot;http://www.eatcs.org/index.php/component/content/article/1-news/1856-the-eatcs-award-2014-laudatio-for-martin-dyer&quot;&gt;deserved&lt;/a&gt;, of course. Congrats!&lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/6">General</category>
 <pubDate>Sun, 12 Oct 2014 22:54:33 +0000</pubDate>
</item>
<item>
 <title>CFP: Off-the-Beaten-Track (OBT) workshop at POPL 2015</title>
 <link>http://lambda-the-ultimate.org/node/5064</link>
 <description>&lt;p &gt;Announcing the 2015 edition of the OBT workshop, to be co-located with POPL 2015, in Mumbai, India. Two-page paper submissions are due November 7, 2014.&lt;/p&gt;
&lt;p &gt;From the web page (&lt;a href=&quot;http://www.cs.rice.edu/~sc40/obt15/&quot;&gt;http://www.cs.rice.edu/~sc40/obt15/&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote &gt;&lt;p &gt;
Programming language researchers have the principles, tools, algorithms and abstractions to solve all kinds of problems, in all areas of computer science. However, identifying and evaluating new problems, particularly those that lie outside the typical core PL problems we all know and love, can be a significant challenge. This workshop&#039;s goal is to identify and discuss problems that do not often show up in our top conferences, but where programming language research can make a substantial impact. We hope fora like this will increase the diversity of problems that are studied by PL researchers and thus increase our community&#039;s impact on the world.&lt;/p&gt;
&lt;p &gt;While many workshops associated with POPL have become more like mini-conferences themselves, this is an anti-goal for OBT. The workshop will be informal and structured to encourage discussion. We are at least as interested in problems as in solutions.
&lt;/p&gt;&lt;/blockquote&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/1">LtU Forum</category>
 <pubDate>Sun, 05 Oct 2014 15:59:57 +0000</pubDate>
</item>
<item>
 <title>Domain settings</title>
 <link>http://lambda-the-ultimate.org/node/5060</link>
 <description>&lt;p &gt;I am about to make some changes to the name server definitions. Since changes take time to propagate, you may have trouble reaching the site for awhile. If this happens, try using the .com domain instead of the preferred .org domain.&lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/3">Admin</category>
 <pubDate>Sat, 04 Oct 2014 11:24:32 +0000</pubDate>
</item>
<item>
 <title>sml-family.org</title>
 <link>http://lambda-the-ultimate.org/node/5058</link>
 <description>&lt;p &gt;In his &lt;A href=&quot;http://existentialtype.wordpress.com/2014/09/26/sml-family-org-up-and-running/&quot;&gt;blog&lt;/A&gt;, &lt;A href=&quot;http://www.cs.cmu.edu/~rwh/&quot;&gt;Bob Harper&lt;/A&gt;, in joint effort with &lt;A href=&quot;http://people.cs.uchicago.edu/~dbm/&quot;&gt;Dave MacQueen&lt;/A&gt; and &lt;A href=&quot;http://www.lars.com/&quot;&gt;Lars Bergstrom&lt;/A&gt;, announces the launch of &lt;A href=&quot;http://sml-family.org&quot;&gt;sml-family.org&lt;/A&gt;:&lt;/p&gt;
&lt;blockquote &gt;&lt;p &gt;
The Standard ML Family project provides a home for online versions of various formal definitions of Standard ML, including the &quot;Definition of Standard ML, Revised&quot; (Standard ML 97). The site also supports coordination between different implementations of the Standard ML (SML) programming language by maintaining common resources such as the documentation for the &lt;A href=&quot;http://sml-family.org/Basis/index.html&quot;&gt;Standard ML Basis Library&lt;/A&gt; and standard test suites. The goal is to increase compatibility and resource sharing between Standard ML implementations. &lt;/p&gt;
&lt;p &gt;The site includes a &lt;A href=&quot;http://sml-family.org/#History&quot;&gt;history section&lt;/A&gt; devoted to the history of ML, and of Standard ML in particular. This section will contain a collection of original source documents relating to the design of the language.
&lt;/p&gt;&lt;/blockquote&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/5">Fun</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/11">Functional</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/7">History</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/8">Implementation</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/10">Paradigms</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/29">Semantics</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/19">Theory</category>
 <pubDate>Tue, 30 Sep 2014 19:27:43 +0000</pubDate>
</item>
<item>
 <title>Inferring algebraic effects</title>
 <link>http://lambda-the-ultimate.org/node/5055</link>
 <description>&lt;p &gt;&lt;a href=&quot;http://www.lmcs-online.org/ojs/viewarticle.php?id=1469&amp;amp;layout=abstract&quot;&gt;Logical methods in computer science&lt;/A&gt; just published &lt;a href=&quot;http://matija.pretnar.info/&quot;&gt;Matija Pretnar&lt;/A&gt;&#039;s &lt;A href=&quot;http://arxiv.org/pdf/1312.2334.pdf&quot;&gt;latest take on algebraic effects and handlers&lt;/A&gt;:&lt;/p&gt;
&lt;blockquote &gt;&lt;p &gt;
We present a complete polymorphic effect inference algorithm for an ML-style language with handlers of not only exceptions, but of any other algebraic effect such as input &amp;amp; output, mutable references and many others. Our main aim is to offer the programmer a useful insight into the effectful behaviour of programs. Handlers help here by cutting down possible effects and the resulting lengthy output that often plagues precise effect systems. Additionally, we present a set of methods that further simplify the displayed types, some even by deliberately hiding inferred information from the programmer.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p &gt;Pretnar and &lt;A href=&quot;http://andrej.com/&quot;&gt;Bauer&lt;/A&gt;&#039;s &lt;A href=&quot;http://eff-lang.org/&quot;&gt;Eff&lt;/A&gt; has made &lt;A href=&quot;http://lambda-the-ultimate.org/node/4090&quot;&gt;previous&lt;/A&gt; &lt;A href=&quot;http://lambda-the-ultimate.org/node/4481&quot;&gt;appearances&lt;/A&gt; here on LtU. Apart from the new fangled polymorphic effect system, this paper also contains an Eff tutorial. &lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/11">Functional</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/8">Implementation</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/10">Paradigms</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/29">Semantics</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/19">Theory</category>
 <pubDate>Sat, 27 Sep 2014 23:16:37 +0000</pubDate>
</item>
<item>
 <title>LtU&#039;s new server</title>
 <link>http://lambda-the-ultimate.org/node/5053</link>
 <description>Lambda the Ultimate is now running on a new, faster, more reliable server.  The old one is now, uh... pining for the fjords.

This should resolve the increasingly frequent outages we&#039;ve seen recently.

Because the old server had started failing, we didn&#039;t have time to do as much quality control on the migration as we would have liked.  If anyone notices any issues with the site, please comment in this thread.

Currently known issues:

&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:line-through&quot;&gt;Non-Latin UTF-8 characters apparently didn&#039;t survive the database migration correctly.  This is a particular issue if you have a username containing non-Latin characters - you may not be able to log in currently.&lt;/span&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:line-through&quot;&gt;It&#039;s possible that some comments posted later on Monday don&#039;t appear on the new site&lt;/span&gt;. (Resolved: there were no missing comments)
&lt;li&gt;New user signup emails are not yet working.
&lt;li&gt;&lt;span style=&quot;text-decoration:line-through&quot;&gt;Due to DNS propagation, not everyone will see the new site immediately.&lt;/span&gt; (Now resolved)
&lt;/ul&gt;

The struck out issues have been resolved.  The remaining issue, with user signup emails, should be resolved in the next few days.
</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/3">Admin</category>
 <pubDate>Tue, 23 Sep 2014 07:26:16 +0000</pubDate>
</item>
<item>
 <title>Breaking the Complexity Barrier of Pure Functional Programs with Impure Data Structures</title>
 <link>http://lambda-the-ultimate.org/node/5052</link>
 <description>&lt;p &gt;&lt;a href=&quot;https://lirias.kuleuven.be/bitstream/123456789/201251/1/preliminary.pdf&quot;&gt;Breaking the Complexity Barrier of Pure Functional Programs with Impure Data Structures&lt;/a&gt; by Pieter Wuille and Tom Schrijvers:&lt;/p&gt;
&lt;blockquote &gt;&lt;p &gt;Pure functional programming language offer many advantages over impure languages. Unfortunately, the absence of destructive update, imposes a complexity barrier. In imperative languages, there are algorithms and data structures with better complexity. We present our project for combining existing program transformation techniques to transform inefficient pure data structures into impure ones with better complexity. As a consequence, the programmer is not exposed to the impurity and retains the advantages of purity.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p &gt;This paper is along the same lines &lt;a href=&quot;http://lambda-the-ultimate.org/node/4611&quot;&gt;a question I asked a couple of years ago&lt;/a&gt;. The idea here is to allow programming using immutable interfaces, and then automatically transform it into a more efficient mutable equivalent.&lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/11">Functional</category>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/19">Theory</category>
 <pubDate>Mon, 22 Sep 2014 14:10:48 +0000</pubDate>
</item>
<item>
 <title>Inside the Wolfram Language</title>
 <link>http://lambda-the-ultimate.org/node/5050</link>
 <description>&lt;p &gt;Video of Stephen Wolfram &lt;a href=&quot;https://www.youtube.com/watch?v=EjCWdsrVcBM&quot;&gt;showing off the Wolfram Language&lt;/a&gt; and sharing his perspective on the design of the language at Strange Loop conference.&lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/6">General</category>
 <pubDate>Sun, 21 Sep 2014 02:20:09 +0000</pubDate>
</item>
<item>
 <title>What&#039;s in store for the most widely used language by discerning hackers?</title>
 <link>http://lambda-the-ultimate.org/node/5048</link>
 <description>&lt;p &gt;Or, in other words, what&#039;s the &lt;a href=&quot;https://lists.gnu.org/archive/html/emacs-devel/2014-09/msg00434.html&quot;&gt;future of Emacs Lisp&lt;/a&gt; (and unavoidable &lt;a href=&quot;https://news.ycombinator.com/item?id=8328206&quot;&gt;HN discussion)&lt;/a&gt;. &lt;/p&gt;
&lt;p &gt;The original message contains some interesting tidbits. I am not sure how the discussion on emacs-devel will develop. But speculating about things such as Guile elisp is, of course, our bailiwick.&lt;/p&gt;</description>
 <category domain="http://lambda-the-ultimate.org/taxonomy/term/6">General</category>
 <pubDate>Wed, 17 Sep 2014 05:14:55 +0000</pubDate>
</item>
</channel>
</rss>

---

feed.format:     rss 2.0
feed.title:      Lambda the Ultimate - Programming Languages Weblog
feed.url:        http://lambda-the-ultimate.org
feed.summary:    Programming languages news, articles and discussion

feed.items[0].title: John C Reynolds Doctoral Dissertation Award nominations for 2014
feed.items[0].url:   http://lambda-the-ultimate.org/node/5088

## note: no guid; will fallback/reuse url
feed.items[0].guid:  http://lambda-the-ultimate.org/node/5088


feed.items[1].title: Zélus : A Synchronous Language with ODEs
feed.items[1].url:   http://lambda-the-ultimate.org/node/5087

